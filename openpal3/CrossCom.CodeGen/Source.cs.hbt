// <auto-generated />

namespace {{Namespace}}
{
    using System;
    using System.Runtime.InteropServices;
    using CrossCom;
    using CrossCom.Attributes;

{{#each Interfaces}}
    [CrossComInterfaceImport("{{InterfaceId}}", typeof(Internal.{{Name}}Object))]
    public interface {{Name}} : {{Base}}
    {
    {{#each Methods}}
        {{#if MarshalReturnType}}[return: MarshalAs(UnmanagedType.{{MarshalReturnTypeAs}})]{{/if}}
        [CrossComMethod]
        delegate {{RawReturnType}} _{{Name}}(IntPtr self{{#each Arguments}}, {{RawTypeWithDecorator}} {{Name}}{{/each}});
    {{/each}}

    {{#each Methods}}
        {{ManagedReturnType}} {{Name}}({{#each Arguments}}{{ManagedTypeWithDecorator}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}});
    {{/each}}
    }
{{/each}}

{{#each CoClasses}}
    [CrossComObjectImport("{{ClassId}}")]
    public class {{Name}}
    { }
{{/each}}

    namespace Internal
    {
    {{#each Interfaces}}
        internal class {{Name}}Object : {{Base}}Object, {{Name}}
        {
            public {{Name}}Object(IntPtr ptr) : base(ptr) {}

            
        {{#each Methods}}
            public {{ManagedReturnType}} {{Name}}({{#each Arguments}}{{ManagedTypeWithDecorator}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
            {
            {{#unless ReturnVoid}}
                var retVal =
            {{/unless}}
                    this.GetMethod<{{../Name}}._{{Name}}>()(this.GetComPtr(){{#each Arguments}}, {{#if WrappedType.IsOut}}out var __{{Name}}{{else}}{{#if WrappedType.IsComObject}}({{Name}} as ImportedObject).GetComPtr(){{else}}{{Name}}{{/if}}{{/if}}{{/each}});
            {{#each Arguments}}{{#if WrappedType.IsOut}}{{#if WrappedType.IsComObject}}
                {{Name}} = new {{WrappedType.ManagedType}}Object(__{{Name}});
            {{else}}
                {{Name}} = __{{Name}};
            {{/if}}{{/if}}{{/each}}

            {{#unless ReturnVoid}}
                return retVal;
            {{/unless}}
            }
        {{/each}}
        }
    {{/each}}
    }

}