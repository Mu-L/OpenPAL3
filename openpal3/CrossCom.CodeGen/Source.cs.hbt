// <auto-generated />

namespace {{Namespace}}
{
    using System;
    using System.Runtime.InteropServices;
    using CrossCom;
    using CrossCom.Attributes;

{{#each Interfaces}}
    [Guid("{{InterfaceId}}")]
    [CrossComInterface(typeof(Internal.{{Name}}Rcw), typeof(Internal.{{Name}}Ccw))]
    public interface {{Name}} : {{Base}}
    {
    {{#each Methods}}
        {{#if MarshalReturnType}}[return: MarshalAs(UnmanagedType.{{MarshalReturnTypeAs}})]{{/if}}
        [CrossComMethod]
        public delegate {{RawReturnType}} _{{Name}}(IntPtr self{{#each Arguments}}, {{RawTypeWithDecorator}} {{Name}}{{/each}});
    {{/each}}

    {{#each Methods}}
        {{ManagedReturnType}} {{Name}}({{#each Arguments}}{{{ManagedTypeWithDecorator}}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}});
    {{/each}}
    }
{{/each}}

{{#each CoClasses}}
    [Guid("{{ClassId}}")]
    public class {{Name}}
    { }
{{/each}}

    namespace Internal
    {
    {{#each Interfaces}}
        internal class {{Name}}Rcw : {{Base}}Rcw, {{Name}}
        {
            public {{Name}}Rcw(IntPtr ptr) : base(ptr) {}

            
        {{#each Methods}}
            public {{ManagedReturnType}}
            {{Name}}({{#each Arguments}}{{ManagedTypeWithDecorator}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
            {
            {{#unless ReturnVoid}}
                var retVal =
            {{/unless}}
                    this.GetMethod<{{../Name}}._{{Name}}>()(this.GetComPtr(typeof({{../Name}})){{#each Arguments}}, {{#if ArgType.IsOut}}out var __{{Name}}{{else}}{{#if ArgType.IsComObject}}({{Name}} as IComObject).GetComPtr(typeof({{ArgType.ManagedType}})){{else}}{{Name}}{{/if}}{{/if}}{{/each}});
            {{#each Arguments}}{{#if ArgType.IsOut}}{{#if ArgType.IsComObject}}
                if (Unknown.ObjectCache.TryGetValue(__{{Name}}, out var ____{{Name}}))
                {
                    {{Name}} = ({{ArgType.ManagedType}})____{{Name}};
                }
                else
                {
                    {{Name}} = new {{ArgType.ManagedType}}Rcw(__{{Name}});
                }
            {{else}}
                {{Name}} = __{{Name}};
            {{/if}}{{/if}}{{/each}}

            {{#unless ReturnVoid}}
                return retVal;
            {{/unless}}
            }
        {{/each}}
        }
    {{/each}}
    
    {{#each Interfaces}}
        class {{Name}}Ccw : IUnknownCcw
        {
            private static readonly GCHandle VirtualTableHandle;

            static {{Name}}Ccw()
            {
                VirtualTable = new {{Name}}VirtualTable()
                {
                    QueryInterfacePointer = IUnknownCcw.VirtualTable.QueryInterfacePointer,
                    AddRefPointer = IUnknownCcw.VirtualTable.AddRefPointer,
                    ReleasePointer = IUnknownCcw.VirtualTable.ReleasePointer,
                {{#each Ancestors}}
                {{#each Methods}}
                    {{Name}}Pointer = {{../Name}}Ccw.VirtualTable.{{Name}}Pointer,
                {{/each}}
                {{/each}}
                {{#each Methods}}
                    {{Name}}Pointer = Marshal.GetFunctionPointerForDelegate<{{../Name}}._{{Name}}>({{Name}}),
                {{/each}}
                };

                VirtualTableHandle = GCHandle.Alloc(VirtualTable, GCHandleType.Pinned);
            }

            public {{Name}}Ccw()
                : this(VirtualTableHandle.AddrOfPinnedObject())
            {
            }

            protected {{Name}}Ccw(IntPtr virtualTable)
                : base(virtualTable)
            {
            }

            public static new {{Name}}VirtualTable VirtualTable { get; }

            {{#each Methods}}
            private static {{RawReturnType}} {{Name}}(IntPtr self{{#each Arguments}}, {{RawTypeWithDecorator}} {{Name}}{{/each}})
            {
                {{#unless ReturnVoid}}
                    var retVal =
                {{/unless}}
                    (GetObject(self) as {{../Name}}).{{Name}}(
                {{#each Arguments}}
                {{#if ArgType.IsOut}}
                    out var __{{Name}}
                {{else}}
                    {{#if ArgType.IsComObject}}
                        (GetObject({{Name}}) as {{ArgType.ManagedType}})
                    {{else}}
                        {{Name}}
                    {{/if}}
                {{/if}}
                {{#unless @last}}, {{/unless}}
                {{/each}});

                {{#each Arguments}}{{#if ArgType.IsOut}}{{#if ArgType.IsComObject}}
                    {{Name}} = (__{{Name}} as IComObject).GetComPtr(typeof({{ArgType.ManagedType}}));
                {{else}}
                    {{Name}} = __{{Name}};
                {{/if}}{{/if}}{{/each}}

                {{#unless ReturnVoid}}
                    return retVal;
                {{/unless}}
            }
            {{/each}}

            /// <summary>
            /// VirtualTable for <see cref="IUnknownCcw"/>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public struct {{Name}}VirtualTable
            {
                public IntPtr QueryInterfacePointer;
                public IntPtr AddRefPointer;
                public IntPtr ReleasePointer;
                {{#each Ancestors}}
                {{#each Methods}}
                public IntPtr {{Name}}Pointer;
                {{/each}}
                {{/each}}
                {{#each Methods}}
                public IntPtr {{Name}}Pointer;
                {{/each}}
            }
        }
    {{/each}}
    }
}